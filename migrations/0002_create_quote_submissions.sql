
CREATE TABLE IF NOT EXISTS public.quote_submissions (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    "firstName" text,
    "lastName" text,
    email text,
    phone text,
    "birthDate" text,
    consent boolean,
    service text
);

ALTER TABLE public.quote_submissions OWNER TO postgres;

ALTER TABLE public.quote_submissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.quote_submissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.quote_submissions'::regclass AND attname = 'coverageAmount') THEN
        ALTER TABLE public.quote_submissions ADD COLUMN "coverageAmount" text;
    END IF;
    IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.quote_submissions'::regclass AND attname = 'smoker') THEN
        ALTER TABLE public.quote_submissions ADD COLUMN smoker text;
    END IF;
    IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.quote_submissions'::regclass AND attname = 'destination') THEN
        ALTER TABLE public.quote_submissions ADD COLUMN destination text;
    END IF;
    IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.quote_submissions'::regclass AND attname = 'tripStartDate') THEN
        ALTER TABLE public.quote_submissions ADD COLUMN "tripStartDate" text;
    END IF;
    IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.quote_submissions'::regclass AND attname = 'tripEndDate') THEN
        ALTER TABLE public.quote_submissions ADD COLUMN "tripEndDate" text;
    END IF;
    IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.quote_submissions'::regclass AND attname = 'hasPreExistingConditions') THEN
        ALTER TABLE public.quote_submissions ADD COLUMN "hasPreExistingConditions" text;
    END IF;
    IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.quote_submissions'::regclass AND attname = 'coverageType') THEN
        ALTER TABLE public.quote_submissions ADD COLUMN "coverageType" text;
    END IF;
    IF NOT EXISTS (SELECT FROM pg_attribute WHERE attrelid = 'public.quote_submissions'::regclass AND attname = 'financialService') THEN
        ALTER TABLE public.quote_submissions ADD COLUMN "financialService" text;
    END IF;
END;
$$;

GRANT ALL ON TABLE public.quote_submissions TO anon;
GRANT ALL ON TABLE public.quote_submissions TO authenticated;
GRANT ALL ON TABLE public.quote_submissions TO postgres;
GRANT ALL ON TABLE public.quote_submissions TO service_role;

ALTER TABLE public.quote_submissions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users" ON public.quote_submissions FOR SELECT USING (true);
CREATE POLICY "Enable insert for anyone" ON public.quote_submissions FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for users based on user_id" ON public.quote_submissions FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);
CREATE POLICY "Enable delete for users based on user_id" ON public.quote_submissions FOR DELETE USING (auth.uid() = id);

ALTER SEQUENCE public.quote_submissions_id_seq OWNER TO postgres;

GRANT ALL ON SEQUENCE public.quote_submissions_id_seq TO postgres;
GRANT ALL ON SEQUENCE public.quote_submissions_id_seq TO anon;
GRANT ALL ON SEQUENCE public.quote_submissions_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.quote_submissions_id_seq TO service_role;
